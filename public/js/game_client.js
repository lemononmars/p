var numPlayersDone = 0; // number of players done in the current phase (planning / arranging)

$(document).ready(function(){
	
    /**
     * Click checkers
     */

	$('.gamelog_button').click(function(){
		$('#gamelog').toggle();
		$('.gamelog_button').toggle();
    });

    socket.on('new game', function(data) {
        $('#gamelist_lobby').hide();
        $('#menu_bar').hide();
        $('#game_board').show();
        $('#gamelog_window').show();
	    startGame(data);
    });

    // handing out stuff you start the game with
    socket.on('starting stuff recieved', function(data) {
        for (i = 0; i < numPlayers; i ++) {
            var a = data.flowerCards[myID];
            var card = new flowerCard(a[0], a[1], a[2], a[3], a[4]);
            players[i].drawFlowerCard(card);
        }
        // assign player bonuses (index randomly generated by server)
        playerBonuses = [[0,1,2], [0,2,1], [1,0,2], [1,2,0], [2,0,1], [2,1,0]];
        for (i = 0; i < numPlayers; i ++)
            players[i].bonus = playerBonuses[data.bonuses[i]];
    });

    socket.on('market generated', function(data) {
        newMarket(data);
    });

    socket.on('time tokens submitted', function(data) {
        addLog(players[data.id].username + ' finished', data.id);
        players[data.id].myPlayedTimeTokens = data.timeTokens;
        numPlayersDone ++;
        if (myID == 0 && numPlayersDone >= numPlayers) {
            socket.emit('tokens ready');
            numPlayersDone = 0;
        }
    });

    socket.on('to buy phase', function(data) {
        isDone = false;
        collectTimeTokens();	// wait for this message from the server
        phase = 2;
        statusBar.text = "Turn " + turn + ": buy phase";
        passButton = new component(50, 25, "black", "white", 400, 265, "Pass", "center");
        activeShop = 0;
        activeTokenOrder = 0;
        currentPlayer = getActiveTimeToken().id;
        addLog("------ buy phase ------");
        if (tutorial)
            addLog(">> On your turn, click on the goods to buy");
    });

    socket.on('action taken', function(data) {
        takeAction(data.id, data.location, data.index);
    });

    socket.on('flower arranged', function(data) {
        players[data.id].arrangeFlower(data.card, data.indices, data.ribbons);
    });

    socket.on('player finished arranging', function() {
        numPlayersDone ++;
        if (myID == 0 && numPlayersDone >= numPlayers) {
            socket.emit('to next turn');
            numPlayersDone = 0;
        }
    });

    socket.on('next turn', function() {
        isDone = false;
        turn ++;
        phase = 0;
        if (myID == 0)
            socket.emit('generate market', generateGoods(numPlayers));
    });
});